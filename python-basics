pip install xxxx    >>>> instala novas ferramentas do python
virtualenv xxxx     >>>> cria um novo ambiente virtual
jupyter-notebook    >>>> executa a ferramenta notebook de web

pip install --upgrade --no-deps statsmodels

import numpy as np  
import pandas as pd 
import pandasql     
import matplotlib.pyplot as plt
import seaborn as sns
import json
import requests
import datetime 
import ggplot
import scipy.stats
import cython
import statsmodel

PARA IMPORTAR PACOTES E MODULOS DO PYTHON, VC PODE USAR:
import xxx    >>> importa todo o módulo com todas as funções
from xxxx import yyy >>> importa somente determinada função do módulo completo
from xxxx.yyy import function as func >>>> importa uma função 'function de um submódulo yyy de um módulo maior xxx e chama de 'func'
=================================

type(xyz) 	>>>>> retorna o tipo da variável (float, int, etc)
True, False >>>>> operador lógico sempre com maiuscula
# 			>>>>> para fazer comentários
==			>>>>> igualdade
!=			>>>>> diferente
<>			>>>>> maior / menor
% 			>>>>> resto da divisão (para ver se é par/impar)
**          >>>>> exponencial   

s1 = [1,2,3] >  lista (permite elementos de tipos diferentes ex: [True, 4, 'casa']. Somas entre listas fazem 'append'
s1 = (1,2,3) > tupla   - elementos são inalteraveis
s1 = {1,2,3 } > set / conjunto  - permite operações de intersection, union e difference de elementos
d = {'marcos':28, 'maria':20, 'pedro':18}   > dicionario (chave:valor)


===FUNÇÃO===
def somar(n1, n2):
    return n1 + n2

======ATALHOS JUPYTER-NOTEBOOK=========

SHIFT+TAB: HELP POPUP DO COMANDO

ESC: modo comando
	D,D: DELETA LINHA
	A: ADICIONA LINHA ACIMA
	B: ADICIONA LINHA ABAIXO
	    
    
====== FILTROS PANDAS======
	
list(df)   > lista as colunas do dataframe
	> também faz uma copia identica de uma lista para outra variável, sem alteração mutua, ex: a = list(b)
time = df['TIME']    > cria uma tabela / variável chamada 'time' somente com os valores da coluna 'TIME'

df['column'].value_counts()     > exibe a contagem de cada tipo de item da referida coluna (ex: A=30   B=10    C=5)
df.groupby('col1')['col2'].value_counts()	> 'tabela dinâmica' contando os itens da coluna 1 para cada tipo de item da coluna 2
pd.pivot_table( df, index=['col1','col2','col3'], values=['SIM'] )    > tabela dinâmica normal

df[(df['col1'] == 1) & (df['col2'] == '100')]    > aplica dois filtros ao mesmo tempo

df[df['col1]=='1']     > filtra a coluna 'col1' do dataframe para apenas o valor 1
df['col1']=='1'   >  lê cada linha e exibe V ou F para a condição filtrada
df[['col2']][df['col1'] ==1]    > filtra 'col1'==1 e exibe os valores da col2 nessa condição

df2 = df.groupby('UNIT').aggregate({'ENTRIESn_hourly': [sum]})

=============================================		
Here are the details of your new API account.

Application name	testAPI
API key	eb36bf54e517d197f9b4805f6c9084de
Shared secret	4f4d2fb3059ea7c062ea4177924bdb94
Registered to	ramehx


===========FUNÇÕES IMPORTANTES=================================
float() int() str() >>>>>>>> converte a variável no formato da função
upper()	>>>>>>>>	converte um string em caixa alta
count()	>>>>>>>>	conta os caracteres de um string
index()	>>>>>>>>	retorna o index do elemento em questão
append() >>>>>>>>	adiciona elementos a lista sem apagar o que ja tem
remove() >>>>>>>>	remove elementos da lista
reverse() >>>>>>>>	reverte a ordem dos elementos da lista
max()	>>>>>>>>	retorna o valor maximo de uma lista
sorted() >>>>>>>>	retorna a lista ordenada conforme o argumento 'reverse'
shape()	>>>>>>>		retorna a dimensão do array numpy

============NUMPY / ARRAYS============================================
módulo para trabalhar com arrays (vetor)
np.array([1,2,3,4])
Uma soma entre arrays faz somas elemento por elemento.
Os arrays sempre tem elementos de mesmo tipo. Na hora da soma, ele sempre converte para um determinado tipo

y = [4 , 9 , 6, 3, 1]   >>> array y
high = y > 5	>>>> cria uma variavel com os elementos de y em que todos os valores obedecem a condição
y[high]    >>>> imprime os elementos de y que obedecem a condição de 'high'

Y[10:20] = exibe todos os elementos no intervalo 10:19
y[50] >>	imprime a linha 49
y[50,:] >>	imprime a linha 49
y[:,1] >>	imprime todos os elementos da coluna 1
y[50,1] >>	imprime o elemento da linha 49, col 1

np.array([1,2,3]) >> array(1, 2, 3)
np.array([[1],[2],[3]]) >> array([1],
								 [2],
								 [3])
								 
								  			
